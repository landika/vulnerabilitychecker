import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from pprint import pprint

class WebSecurityScanner:
    """
    A simple web security scanner for identifying XSS and SQL Injection vulnerabilities.
    """

    def __init__(self, user_agent):
        """
        Initialize the WebSecurityScanner with a specified user agent.

        Parameters:
        - user_agent (str): The user agent to be used in HTTP requests.
        """
        self.session = requests.Session()
        self.session.headers["User-Agent"] = user_agent

    def get_all_forms(self, url):
        """
        Get all HTML forms from a specified URL.

        Parameters:
        - url (str): The URL to retrieve forms from.

        Returns:
        - list: List of HTML forms.
        """
        soup = BeautifulSoup(self.session.get(url).content, "html.parser")
        return soup.find_all("form")

    def get_form_details(self, form):
        """
        Extract detailed information about an HTML form.

        Parameters:
        - form (bs4.element.Tag): HTML form element.

        Returns:
        - dict: Dictionary containing form details.
        """
        details = {
            "action": form.attrs.get("action", "").lower(),
            "method": form.attrs.get("method", "get").lower(),
            "inputs": [
                {"type": input_tag.attrs.get("type", "text"), "name": input_tag.attrs.get("name")}
                for input_tag in form.find_all("input")
            ],
        }
        return details

    def submit_form(self, form_details, url, value):
        """
        Submit a form with a malicious payload and return the HTTP response.

        Parameters:
        - form_details (dict): Dictionary containing form details.
        - url (str): The original URL containing the form.
        - value (str): Payload value for text and search inputs.

        Returns:
        - requests.Response: The HTTP response after form submission.
        """
        target_url = urljoin(url, form_details["action"])
        data = {
            input["name"]: value if input["type"] in ["text", "search"] else input.get("value", "")
            for input in form_details["inputs"]
        }
        print(f"[+] Submitting malicious payload to {target_url}")
        print(f"[+] Data: {data}")
        return self.session.post(target_url, data=data) if form_details["method"] == "post" else self.session.get(target_url, params=data)

    def is_vulnerable(self, response):
        """
        Check if a page is vulnerable to SQL Injection based on the response.

        Parameters:
        - response (requests.Response): The HTTP response.

        Returns:
        - bool: True if the page is vulnerable, False otherwise.
        """
        errors = [
            "you have an error in your sql syntax;",
            "warning: mysql",
            "unclosed quotation mark after the character string",
            "quoted string not properly terminated",
        ]
        return any(error in response.content.decode().lower() for error in errors)

    def scan_xss(self, url):
        """
        Identify XSS vulnerable forms on a specified URL.

        Parameters:
        - url (str): The URL to scan.

        Returns:
        - bool: True if any form is vulnerable, False otherwise.
        """
        forms = self.get_all_forms(url)
        print(f"[+] Detected {len(forms)} forms on {url}.")
        js_script = "<Script>alert('hi')</script>"
        is_vulnerable = False
        for form in forms:
            form_details = self.get_form_details(form)
            content = self.submit_form(form_details, url, js_script).content.decode()
            if js_script in content:
                print(f"[+] XSS Detected on {url}")
                print(f"[*] Form details:")
                pprint(form_details)
                is_vulnerable = True
        return is_vulnerable

    def scan_sql_injection(self, url):
        """
        Test a URL and HTML forms for SQL Injection vulnerabilities.

        Parameters:
        - url (str): The URL to scan.
        """
        for c in "\"'":
            new_url = f"{url}{c}"
            print("[!] Trying", new_url)
            res = self.session.get(new_url)
            if self.is_vulnerable(res):
                print("[+] SQL Injection vulnerability detected, link:", new_url)
                return
        forms = self.get_all_forms(url)
        print(f"[+] Detected {len(forms)} forms on {url}.")
        for form in forms:
            form_details = self.get_form_details(form)
            for c in "\"'":
                data = {
                    input_tag["name"]: input_tag["value"] + c
                    if input_tag["type"] == "hidden" or input_tag["value"]
                    else f"test{c}"
                    for input_tag in form_details["inputs"]
                    if input_tag["type"] != "submit"
                }
                form_url = urljoin(url, form_details["action"])
                res = self.session.post(form_url, data=data) if form_details["method"] == "post" else self.session.get(form_url, params=data)
                if self.is_vulnerable(res):
                    print("[+] SQL Injection vulnerability detected, link:", form_url)
                    print("[+] Form:")
                    pprint(form_details)
                    break

if __name__ == "__main__":
    # Example usage for a specific URL
    url = "https://xss-game.appspot.com/level1/frame"
    url = "http://testphp.vulnweb.com/artists.php?artist=1"
    print("check_sqli")
    scanner = WebSecurityScanner(user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36")
    scanner.scan_sql_injection(url)
    print("check_xss")
    print(scanner.scan_xss(url))
